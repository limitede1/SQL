Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000

SELECT COUNT(*)
FROM attribute

ii. Business table = 10000

SELECT COUNT(*) 
FROM business

iii. Category table = 10000

SELECT COUNT(*) 
FROM category
iv. Checkin table = 10000
S
ELECT COUNT(*) 
FROM checkin
v. elite_years table = 10000

SELECT COUNT(*) 
FROM elite_years

vi. friend table = 10000

SELECT COUNT(*) 
FROM friend

vii. hours table = 10000

SELECT COUNT(*) 
FROM hours

viii. photo table = 10000

SELECT COUNT(*)
FROM photo

ix. review table = 10000

SELECT COUNT(*) 
FROM review

x. tip table = 10000

SELECT COUNT(*) 
FROM tip

xi. user table = 10000

SELECT COUNT(*)
FROM user

	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000 (id)

SELECT COUNT(DISTINCT id)
FROM business

ii. Hours = 1562 (business_id)

SELECT COUNT(DISTINCT business_id)
FROM hours


iii. Category = 2643 (business_id)

SELECT COUNT(DISTINCT business_id)
FROM category

iv. Attribute = 1115 (business_id)

SELECT COUNT(DISTINCT business_id)
FROM attribute

v. Review = 10000 (id), 8090 (business_id), 9581 (user_id)

SELECT Count(DISTINCT id)
FROM review

SELECT Count(DISTINCT business_id)
FROM review

SELECT Count(DISTINCT user_id)
FROM review


vi. Checkin = 493 (business_id)

SELECT COUNT (DISTINCT business_id)
FROM checkin

vii. Photo = 10000 (id), 6493 (business_id)

SELECT Count(DISTINCT id)
FROM photo

SELECT Count(DISTINCT business_id)
FROM photo

viii. Tip = 537 (user_id), 3979 (business_id)

SELECT COUNT (DISTINCT user_id)
FROM tip

SELECT COUNT (DISTINCT business_id)
FROM tip

ix. User = 10000 (id)

SELECT COUNT (DISTINCT id)
FROM user

x. Friend = 11 (user_id)

SELECT COUNT (DISTINCT user_id)
FROM friend

xi. Elite_years = 2780 (user_id)

SELECT COUNT (DISTINCT user_id)
FROM elite_years

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer:
		SELECT id, name, review_count, yelping_since, useful, funny, cool, fans, average_stars, 
			   compliment_hot, compliment_more, compliment_profile, compliment_cute, compliment_list, 
			   compliment_note, compliment_plain, compliment_cool, compliment_funny, compliment_writer, compliment_photos
		FROM  user
		WHERE 	id IS NULL
				or name IS NULL
				or review_count IS NULL
				or yelping_since IS NULL
				or useful IS NULL
				or funny IS NULL
				or cool IS NULL
				or fans IS NULL
				or average_stars IS NULL
				or compliment_hot IS NULL
				or compliment_more IS NULL
				or compliment_profile IS NULL
				or compliment_cute IS NULL
				or compliment_list IS NULL
				or compliment_note IS NULL
				or compliment_plain IS NULL
				or compliment_cool IS NULL
				or compliment_funny IS NULL
				or compliment_writer IS NULL
				or compliment_photos IS NULL
	
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
		SELECT MIN(Stars) 
		FROM review
		
		SELECT MAX(Stars) 
		FROM review
		
		SELECT AVG(Stars) 
		FROM review
		
	
	ii. Table: Business, Column: Stars
	
		min: 1.0		max: 5.0		avg: 3.6549
		
		SELECT MIN(Stars) 
		FROM business
		
		SELECT MAX(Stars) 
		FROM business
		
		SELECT AVG(Stars) 
		FROM business
		
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
		SELECT MIN(likes)
		FROM tip
		
		SELECT MAX(likes)
		FROM tip
		
		SELECT AVG(Likes)
		FROM tip
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
		SELECT MIN(COUNT)
		FROM checkin
		
		SELECT MAX(COUNT)
		FROM checkin
		
		SELECT AVG(COUNT)
		FROM checkin
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000		avg: 24.2995
		
		SELECT MIN(review_count)
		FROM user
		
		SELECT MAX(review_count)
		FROM user
		
		SELECT AVG(review_count)
		FROM user
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
	SELECT 
		city,
		SUM(review_count)
	FROM business
	GROUP BY city
	ORDER BY SUM(review_count) DESC
	
	
	Copy and Paste the Result Below:
	
	+-----------------+-------------------+
| city            | SUM(review_count) |
+-----------------+-------------------+
| Las Vegas       |             82854 |
| Phoenix         |             34503 |
| Toronto         |             24113 |
| Scottsdale      |             20614 |
| Charlotte       |             12523 |
| Henderson       |             10871 |
| Tempe           |             10504 |
| Pittsburgh      |              9798 |
| Montréal        |              9448 |
| Chandler        |              8112 |
| Mesa            |              6875 |
| Gilbert         |              6380 |
| Cleveland       |              5593 |
| Madison         |              5265 |
| Glendale        |              4406 |
| Mississauga     |              3814 |
| Edinburgh       |              2792 |
| Peoria          |              2624 |
| North Las Vegas |              2438 |
| Markham         |              2352 |
| Champaign       |              2029 |
| Stuttgart       |              1849 |
| Surprise        |              1520 |
| Lakewood        |              1465 |
| Goodyear        |              1155 |
+-----------------+-------------------+
(Output limit exceeded, 25 of 362 total rows shown)
	

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT stars AS Star_Rating,
	count(stars) AS Count
FROM business b
WHERE city = 'Avon'
GROUP BY Star_Rating

+-------------+-------+
| Star_Rating | Count |
+-------------+-------+
|         1.5 |     1 |
|         2.5 |     2 |
|         3.5 |     3 |
|         4.0 |     2 |
|         4.5 |     1 |
|         5.0 |     1 |
+-------------+-------+




Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):


ii. Beachwood

SQL code used to arrive at answer:

SELECT stars AS Star_Rating,
	count(stars) AS Count
FROM business b
WHERE city = 'Beachwood'
GROUP BY Star_Rating


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------------+-------+
| Star_Rating | Count |
+-------------+-------+
|         2.0 |     1 |
|         2.5 |     1 |
|         3.0 |     2 |
|         3.5 |     2 |
|         4.0 |     1 |
|         4.5 |     2 |
|         5.0 |     5 |
+-------------+-------+
		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
	SELECT name,
	review_count
	FROM user
	ORDER BY review_count DESC LIMIT 3
	
	Copy and Paste the Result Below:
	
		+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+
		


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
	No because based on the query result below. Gerald has the highest review count with 253 fans
	and Harald had 1153 review count with 311.
	
	SELECT name
	,review_count
	,fans
FROM user
ORDER BY fans DESC limit 10

+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Amy       |          609 |  503 |
| Mimi      |          968 |  497 |
| Harald    |         1153 |  311 |
| Gerald    |         2000 |  253 |
| Christine |          930 |  173 |
| Lisa      |          813 |  159 |
| Cat       |          377 |  133 |
| William   |         1215 |  126 |
| Fran      |          862 |  124 |
| Lissa     |          834 |  120 |
+-----------+--------------+------+
	
	
	

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: There's more review with the word 'love'.

	
	SQL code used to arrive at answer:
	
	SELECT (
		SELECT count(TEXT)
		FROM review
		WHERE TEXT LIKE "%love%"
		) AS love
	,(
		SELECT count(TEXT)
		FROM review
		WHERE TEXT LIKE "%hate%"
		) AS hate
		
+------+------+
| love | hate |
+------+------+
| 1780 |  232 |
+------+------+
	
	
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
SELECT name
	,fans
FROM user
ORDER BY fans DESC limit 10
		
	Copy and Paste the Result Below:
	
	+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
	
	


		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
	I choosed Las Vegas and Restaurants
i. Do the two groups you chose to analyze have a different distribution of hours?

Yes the 4-5 stars have double the amount of hours compared to the 2-3 stars 

SELECT CASE 
		WHEN stars >= 4
			THEN "4-5 stars"
		WHEN stars >= 2
			THEN "2-3 stars"
		ELSE "below 2"
		END star_rankings
	,city
	,c.category
	,count(DISTINCT business.id) AS company_count
	,count(h.hours) AS opening_hours
FROM business
JOIN hours h ON business.id = h.business_id
JOIN category c ON business.id = c.business_id
WHERE city = "Las Vegas"
	AND c.category = "Restaurants"
GROUP BY star_rankings

+---------------+-----------+-------------+---------------+---------------+
| star_rankings | city      | category    | company_count | opening_hours |
+---------------+-----------+-------------+---------------+---------------+
| 2-3 stars     | Las Vegas | Restaurants |             1 |             7 |
| 4-5 stars     | Las Vegas | Restaurants |             2 |            14 |
+---------------+-----------+-------------+---------------+---------------+

ii. Do the two groups you chose to analyze have a different number of reviews?

Yes there is a difference. The 4-5 stars have 939 reviews and 2-3 stars have 123

SELECT CASE 
		WHEN stars >= 4
			THEN "4-5 stars"
		WHEN stars >= 2
			THEN "2-3 stars"
		ELSE "below 2"
		END star_rank
	,city
	,c.category
	,count(DISTINCT business.id) AS company_count
	,sum(review_count) AS total_review
FROM business
JOIN category c ON business.id = c.business_id
WHERE city = "Las Vegas"
	AND c.category = "Restaurants"
GROUP BY star_rank

+-----------+-----------+-------------+---------------+--------------+
| star_rank | city      | category    | company_count | total_review |
+-----------+-----------+-------------+---------------+--------------+
| 2-3 stars | Las Vegas | Restaurants |             1 |          123 |
| 4-5 stars | Las Vegas | Restaurants |             3 |          939 |
+-----------+-----------+-------------+---------------+--------------+
         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

No because the groups have different zip code and the city from 2-3 stars does not have data on the neighborhood.
SQL code used for analysis:

SELECT  CASE WHEN stars >= 4 THEN "4-5 stars"
             WHEN stars >= 2 THEN "2-3 stars"
             ELSE "below 2"
             END star_rank,
        address,
        neighborhood,
        city, 
        postal_code
FROM business
JOIN category c ON business.id = c.business_id
WHERE city = "Las Vegas" AND c.category = "Restaurants"
ORDER BY star_rank

		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: The cities Phoenix and Toronto are far away from each other.
         
         
ii. Difference 2: The average reviews are different with Phoenix being higher in average reviews.
         
         
         
SQL code used for analysis:

SELECT CASE 
		WHEN is_open = 1
			THEN "OPEN"
		WHEN is_open = 0
			THEN "CLOSED"
		END STATUS
	,city
	,count(DISTINCT id) AS number_company
	,sum(review_count) AS total_review
	,round(avg(review_count), 2) AS avg_review
	,round(avg(stars), 2) AS avg_stars
FROM business
GROUP BY is_open
ORDER BY STATUS DESC

	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do: Want category in Las Vegas has the highest review count
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

The type of data needed for this analysis are the id, city and review count fields from the business table
and the business id and category field from the category table. An inner join is needed with the matching fields id from business and business_id from category respectively.
From there we can extract the city, category, and the review count. This would let us see which categories has the highest reviews.
                           
                  
iii. Output of your finished dataset:

+-----------+--------------+--------------+
| city      | category     | review_count |
+-----------+--------------+--------------+
| Las Vegas | Asian Fusion |          768 |
+-----------+--------------+--------------+
         
         
iv. Provide the SQL code you used to create your final dataset:

SELECT b.city
	,c.category
	,b.review_count
FROM business b
INNER JOIN category c ON b.id = c.business_id
WHERE city = 'Las Vegas'
GROUP BY city
	,category
ORDER BY (b.review_count) DESC LIMIT 1

-- Conclusion This assignment was fun! Enjoyed the course SQL for Data Science by Coursera
